@namespace AntdMangement.Pages.User
@layout UserLayout
@page "/user/login"
@using AntdMangement.RequestModels.Login;
@using System.Text.Json;

<div class="main__b__0">
    <div class="login">
        <Form Model="@_model" OnFinish="HandleSubmit">
            <FormItem>
                <AntDesign.Input Placeholder="用户名" Size="large" @bind-Value="@context.UserName">
                    <Prefix><Icon Type="user" /></Prefix>
                </AntDesign.Input>
            </FormItem>
            <FormItem>
                <AntDesign.Input Placeholder="密码" Size="large" @bind-Value="@context.Password" Type="password">
                    <Prefix><Icon Type="lock" /></Prefix>
                </AntDesign.Input>
            </FormItem>
            <div>
                <Checkbox Checked="@context.AutoLogin">
                    自动登录
                </Checkbox>
            </div>
            <Button Type="primary" HtmlType="submit" Class="submit" Size="large" Block>立即登录</Button>
        </Form>
    </div>
</div>
@code
{
    private readonly LoginParamsType _model = new LoginParamsType();

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Inject]
    public IAccountService AccountService { get; set; }

    [Inject]
    public MessageService Message { get; set; }

    [Inject]
    ILocalStorageService localStorage { get; set; }

    [Inject]
    public HttpClient HttpClient { get; set; }

    [Inject]
    public IHttpClientFactory HttpClientFactory { get; set; }

    public async Task HandleSubmit()
    {
        Console.WriteLine("test:");
        //var response = await HttpClient.PostAsJsonAsync<LoginParamsType>("/api/auth/login", _model);
        //var context = await response.Content.ReadAsStringAsync();
        //var data = JsonSerializer.Deserialize<CommonResult<LoginToken>>(context);
        var data=await HttpClientFactory.PostAsync<CommonResult<LoginToken>, LoginParamsType>("/api/auth/login", _model);

        if (data?.Code == 2000 && !string.IsNullOrWhiteSpace(data.Data?.Access_token))
        {
            await localStorage.SetItemAsync<string>(SystemConsts.ACCESS_TOKEN, data.Data?.Access_token);
            await localStorage.SetItemAsync<string>(SystemConsts.Refresh_Token, data.Data?.Refresh_token);
            await localStorage.SetItemAsync<string>(SystemConsts.Expires_In, data.Data?.Expires_in.ToString());

            //var MenuData = HttpClient.GetFromJsonAsync<MenuDataItem[]>("data/menu.json");

            NavigationManager.NavigateTo("/");
            return;
        }
    }

    //public async Task GetCaptcha()
    //{
    //    var captcha = await AccountService.GetCaptchaAsync(_model.Mobile);
    //    await Message.Success($"Verification code validated successfully! The verification code is: {captcha}");
    //}
}